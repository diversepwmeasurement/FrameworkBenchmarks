jobs:
  dependabot:
    if: ${{ github.actor == 'dependabot[bot]' }}
    needs: verify
    permissions:
      contents: write
      pull-requests: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: metadata
      name: Dependabot metadata
      uses: dependabot/fetch-metadata@v1.1.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        PR_URL: ${{github.event.pull_request.html_url}}
      name: Enable auto-merge for Dependabot PRs
      run: gh pr merge --auto --merge "$PR_URL"
  setup:
    outputs:
      branch_name: ${{ steps.event_out.outputs.branch_name }}
      commit_message: ${{ steps.event_out.outputs.commit_message }}
      previous_commit: ${{ steps.event_out.outputs.previous_commit }}
      target_branch_name: ${{ steps.event_out.outputs.target_branch_name }}
      verify_matrix: ${{ steps.verify_out.outputs.verify_matrix }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      if: github.event_name == 'pull_request'
      name: Save PR number
      run: 'mkdir -p ./pr

        echo ${{ github.event.number }} > ./pr/NR

        '
    - continue-on-error: true
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: pr
        path: pr/
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        fetch-depth: 10
    - continue-on-error: true
      if: github.event_name == 'push'
      name: Get commit branch and commit message from push
      run: 'echo "BRANCH_NAME=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV

        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        echo "PREVIOUS_COMMIT=$(git log --format=%H -n 1 HEAD~1)" >> $GITHUB_ENV

        '
    - continue-on-error: true
      if: github.event_name == 'pull_request'
      name: Get commit branch and commit message from PR
      run: 'echo "BRANCH_NAME=$GITHUB_HEAD_REF" >> $GITHUB_ENV

        echo "TARGET_BRANCH_NAME=$(echo ${GITHUB_BASE_REF##*/})" >> $GITHUB_ENV

        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV

        echo "$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        echo "PREVIOUS_COMMIT=$(git log --format=%H -n 1 HEAD^2~1)" >> $GITHUB_ENV

        '
    - continue-on-error: true
      uses: actions/setup-python@v5
      with:
        architecture: x64
        python-version: '3.10'
    - continue-on-error: true
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
      name: Get all changes vs master
      run: 'echo "DIFF<<EOF" >> $GITHUB_ENV

        echo "$(./toolset/github_actions/github_actions_diff.py)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Determine which (if any) tests need to be run
      run: 'echo "RUN_TESTS<<EOF" >> $GITHUB_ENV

        echo "$(grep -oP "github-actions-run-tests \K(.*)" <<< $DIFF || true)" >>
        $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - continue-on-error: true
      id: event_out
      name: Write event outputs
      run: "# Escape the multiline string for Github Actions, see https://lab.amalitsky.com/posts/2022/github-actions-set-output-migration/#migration-from-set-output-to-github-output\n\
        delimiter=\"$(openssl rand -hex 8)\"\n    {\n      echo \"commit_message<<${delimiter}\"\
        \n      echo $COMMIT_MESSAGE\n      echo \"${delimiter}\"\n    } >> $GITHUB_OUTPUT\n\
        echo \"branch_name=$BRANCH_NAME\" >> $GITHUB_OUTPUT\necho \"target_branch_name=$TARGET_BRANCH_NAME\"\
        \ >> $GITHUB_OUTPUT\necho \"previous_commit=$PREVIOUS_COMMIT\" >> $GITHUB_OUTPUT\n"
    - continue-on-error: true
      id: verify_out
      name: Write verify job matrix
      run: '# Use of jq for JSON array creation from https://stackoverflow.com/a/26809318

        # The following creates a JSON object as follows:

        # include:

        #   - TESTLANG: {lang}

        # with a TESTLANG object in the include array for each language under frameworks

        VERIFY_MATRIX=$(ls -1 frameworks | jq -Rc ''.+"/" | select(inside(env.RUN_TESTS))  |
        rtrimstr("/")'' | jq -sc ''{include: map({TESTLANG: .})}'')

        echo "verify_matrix=$VERIFY_MATRIX" >> $GITHUB_OUTPUT

        '
  verify:
    env:
      BRANCH_NAME: ${{ needs.setup.outputs.branch_name }}
      COMMIT_MESSAGE: ${{ needs.setup.outputs.commit_message }}
      PREVIOUS_COMMIT: ${{ needs.setup.outputs.previous_commit }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
      TARGET_BRANCH_NAME: ${{ needs.setup.outputs.target_branch_name }}
      TESTDIR: ${{ matrix.TESTDIR }}
      TESTLANG: ${{ matrix.TESTLANG }}
    if: ${{ !contains(needs.setup.outputs.commit_message, '[ci skip]') && contains(needs.setup.outputs.verify_matrix,
      'TESTLANG') }}
    needs: setup
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
      with:
        fetch-depth: 10
    - continue-on-error: true
      uses: actions/setup-python@v5
      with:
        architecture: x64
        python-version: '3.10'
    - continue-on-error: true
      name: Get all changes vs master
      run: '# Write the result to env.DIFF for later steps

        echo "DIFF<<EOF" >> $GITHUB_ENV

        echo "$(./toolset/github_actions/github_actions_diff.py)" >> $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - continue-on-error: true
      id: should_run_tests
      name: Determine which (if any) tests need to be run
      run: '# grep returns status code 1 if no matches are found. This fails the

        # build as it is a non-zero status. But this is an expected

        # possibility, so `|| true` is used to address/silence that.

        # Write the result to env.RUN_TESTS for later steps

        echo "RUN_TESTS<<EOF" >> $GITHUB_ENV

        echo "$(grep -oP "github-actions-run-tests \K(.*)" <<< $DIFF || true)" >>
        $GITHUB_ENV

        echo "EOF" >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Log status
      run: 'if [ "$RUN_TESTS" ]; then echo "Proceeding to run tests."; else echo ''Skipping
        test verification.''; fi

        '
    - continue-on-error: true
      if: ${{ env.RUN_TESTS }}
      name: Build tfb dockerfile
      uses: mattes/cached-docker-build-action@v1
      with:
        args: ' --file ./Dockerfile --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id
          -g) --tag techempower/tfb .'
        cache_key: ${{ hashFiles('./Dockerfile') }}
    - continue-on-error: true
      name: Stop services
      run: 'sudo service mysql stop || true

        sudo service postgresql stop || true

        '
    - continue-on-error: true
      if: ${{ env.RUN_TESTS }}
      name: Run tests if needed
      run: '# run-ci.py runs the diffing to see if github actions needs to test this
        framework. Ideally/eventually,

        # we''d like to try and do the diffing before github_actions_clean & setup.

        # This will run the tests exactly as you would in your own vm:

        docker network create tfb > /dev/null 2>&1 && docker run --network=tfb -e
        USER_ID=$(id -u) -v /var/run/docker.sock:/var/run/docker.sock --mount type=bind,source=`pwd`,target=/FrameworkBenchmarks
        techempower/tfb --mode verify --test-dir $RUN_TESTS --results-environment
        Github-Actions;

        '
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.verify_matrix) }}
name: build
on:
  repository_dispatch:
    types: trigger-ga___build.yml
